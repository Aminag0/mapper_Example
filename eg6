#!/usr/bin/env python3

import sys

def reducer():
    matrix = {}
    contributions = {}

    # Input comes from STDIN
    for line in sys.stdin:
        # Parse the input from the mapper
        node_id, pagerank, neighbors = line.strip().split('\t')
        pagerank = float(pagerank)
        neighbors = neighbors.strip().split(',')  # Convert string
representation to a list

        matrix[node_id] = (pagerank, neighbors)

        if neighbors != ['0']:
            # Use a more nuanced contribution mechanism
            contribution = pagerank / (len(neighbors) + 1)  # Include
self-contribution
            for neighbor in neighbors:
                contributions.setdefault(neighbor, []).append(contribution)

    # Perform matrix-vector multiplication using the transition matrix
(contributions)
    for node in matrix:
        pagerank, neighbors = matrix[node]
        new_rank = 0.15 + 0.85 * sum(contributions.get(neighbor, [0])[0]
for neighbor in neighbors)

        # Print the new PageRank
        print(f"{node}\t{new_rank}\t{','.join(neighbors)}")

if __name__ == "__main__":
    reducer()
